<?xml version="1.0"?>
<ps_doc title="Grape SQL Function Reference" titlepage="yes" tocpage="yes">

<h1>Grape SQL Functions</h1>
<h2>API result functions</h2>
This functions deal with the creation of standardized API results (in JSON format) to be sent back to the API call. They can be found in <fname>api_result_json.sql</fname>

<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>api_result_error</td>
		<td align="left">
			<i>message</i> TEXT<br />
			<i>code</i> INTEGER<br />
			<i>info</i> JSON<br />
		</td>
		<td align="left">Returns a standardized JSON error object with stats as "ERROR" and the other fields populated. 
			Example: <br /><icode font-size="8pt">{"status":"ERROR", "message":"Message", "code": -2, "error": {} }</icode>
		</td>
	</tr>
	<tr>
		<td>api_error</td>
		<td align="left">
			<i>message</i> TEXT<br />
			<i>code</i> INTEGER<br />
			<i>info</i> JSON<br />
		</td>
		<td align="left">Overload for api_result_error</td>
	</tr>
	<tr>
		<td>api_error</td>
		<td align="left"></td>
		<td align="left">With no arguments, an "Unknown error" message will be generated</td>
	</tr>
	<tr>
		<td>api_error_invalid_input</td>
		<td align="left"></td>
		<td align="left">Similar to calling <icode>api_result_error("Invalid input", -2)</icode></td>
	</tr>

	<tr>
		<td>api_success</td>
		<td align="left">
			<i>keys</i> TEXT[]<br />
			<i>values</i> TEXT[]<br />
			<i>types</i> TEXT[]<br />
		</td>
		<td align="left">This function will construct a JSON object containing at least one field, "status" with the value "OK". The 3 input parameters should be arrays containing additional keys, values and the associated types (n/i/number/integer, j/json or nothing for text).</td>
	</tr>
	<tr>
		<td>api_success</td>
		<td align="left">
			<i>keys</i> TEXT[]<br />
			<i>values</i> TEXT[]<br />
		</td>
		<td align="left"></td>
	</tr>
	<tr>
		<td>api_success</td>
		<td align="left">
			<i>key</i> TEXT<br />
			<i>value</i> INTEGER<br />
		</td>
		<td align="left"></td>
	</tr>
	<tr>
		<td>api_success</td>
		<td align="left">
			<i>key1</i> TEXT<br />
			<i>value1</i> INTEGER<br />
			<i>key2</i> TEXT<br />
			<i>value2</i> INTEGER<br />
		</td>
		<td align="left">Create an API result success JSON object with two integer fields added.</td>
	</tr>
	<tr>
		<td>api_success</td>
		<td align="left">
			<i>key</i> TEXT<br />
			<i>value</i> JSON<br />
		</td>
		<td align="left">Create an API result success JSON object with a JSON field merged into the result.</td>
	</tr>
	<tr>
		<td>api_success</td>
		<td align="left">
		</td>
		<td align="left">Returns a API result object with a status field set to "OK".</td>
	</tr>







	<!--
	<tr>
		<td>array_lowercase</td>
		<td align="left"><i></i> <br /></td>
		<td align="left"></td>
	</tr>
	-->


</table>




<h2>Data importing functions</h2>
<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>data_import_insert</td>
		<td align="left">
		</td>
		<td align="left">
		</td>
	</tr>
	<tr>
		<td>data_upload_done</td>
		<td align="left">
		</td>
		<td align="left">
		</td>
	</tr>
	<tr>
		<td>data_import_row_insert</td>
		<td align="left">
		</td>
		<td align="left">
		</td>
	</tr>



	<!--
	<tr>
		<td>array_lowercase</td>
		<td align="left"><i></i> <br /></td>
		<td align="left"></td>
	</tr>
	-->


</table>

<h2>JSON helpers</h2>

<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>json2xml</td>
		<td align="left">
			<i>data</i> JSON<br />
			<i>root</i> TEXT<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>json_diff</td>
		<td align="left">
			<i>old</i> JSONB<br />
			<i>new</i> JSONB<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>json_diff </td>
		<td align="left">
			<i>old</i> JSON<br />
			<i>new</i> JSON<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>json_object_diff</td>
		<td align="left">
			<i>old</i> JSONB<br />
			<i>new</i> JSONB<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>json_array_diff</td>
		<td align="left">
			<i>old</i> JSONB<br />
			<i>new</i> JSONB<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>json_to_composite_type_text</td>
		<td align="left">
			<i>target_schema</i> TEXT<br />
			<i>target_type</i> TEXT<br />
			<i>data</i> JSON<br />
		</td>
		<td align="left">
		</td>
	</tr>
	<tr>
		<td>json_to_composite_type</td>
		<td align="left">
			<i>target_schema</i> TEXT<br />
			<i>target_type</i> TEXT<br />
			<i>data</i> JSON<br />
		</td>
		<td align="left">
			This function will populate a custom type from a JSON object. Multi-level nested objects are supported.
		</td>
	</tr>
	<tr>
		<td>cast_json_array_to_int_array</td>
		<td align="left">
			<i>JSON</i> data<br />
		</td>
		<td align="left">
			Provides an implicit cast from JSON to INT[] (<fname>cast_json_array_to_int_array.sql</fname>).
			<code lang="sql">
# select cast_json_array_to_int_array('[1,2,3]'::JSON);
cast_json_array_to_int_array 
------------------------------
{1,2,3}

</code>

		</td>
	</tr>
	<tr>
		<td>cast_json_array_to_text_array</td>
		<td align="left">
			<i>JSON</i> data<br />
		</td>
		<td align="left">
			Provides an implicit cast from JSON to TEXT[] (<fname>cast_json_array_to_text_array.sql</fname>).
		</td>
	</tr>

</table>

<h2 id="sql-grape.list_query">List query</h2>
<p>
Grape's list_query call provides an easy way to retrieve rows from a table. Before the contents of a table can be retrieved this way it needs to be added to a whitelist. This functions can be found in <fname>list_query.sql</fname>. The built-in API call to access this function is <b>/grape/list</b>. Access control is enforced on tables retrieved.
</p>
<p>
	The <b>grape.list_query</b> function returns rows from a database table. The following input fields are recognized:
<ul>
	<li>tablename</li>
	<li>schema (optional) TEXT</li>
	<li>sortfield (optional) TEXT</li>
	<li>sortorder (optional) TEXT DESC</li>
	<li>limit (optional) INTEGER default 50</li>
	<li>offset (optional) INTEGER default 0</li>
	<li>filter (optional) array of fields:</li>
	<li>field TEXT</li>
	<li>operand TEXT of '=', '#x003E;', '#x003C;', '#x003E;=', '#x003C;=', 'LIKE', 'ILIKE', 'IS_NULL', 'IS_NOT_NULL', 'IN'</li>
	<li>value text</li>
</ul>
</p>

The following functions deals with the access control:
<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>grape.list_query_whitelist_add</td>
		<td align="left">
			<i>schema</i> TEXT<br />
			<i>tables</i> TEXT[] - A list of table names to allow<br />
			<i>roles</i> TEXT[] - A list of roles to allow<br />
		</td>
		<td align="left">
			Adds tables to the whitelist for use in grape list_query. Users must be in _roles to be able to access the data in the table.
		</td>
	</tr>
	<tr>
		<td>grape.list_query_whitelist_delete</td>
		<td align="left">
			<i>schema</i> TEXT<br />
			<i>tablename</i> TEXT - A table to remove from allow<br />
		</td>
		<td align="left">
			Removes a table from the whitelist.
		</td>
	</tr>

</table>



<h2>Reports</h2>
This functions can be found in <fname>reports.sql</fname>.

<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>save_report</td>
		<td align="left">
			<i>settings</i> JSON<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>execute_report</td>
		<td align="left">
			<i>report_id</i> INTEGER<br />
			<i>parameters</i> JSON<br />
		</td>
		<td align="left">
		</td>
	</tr>

	<tr>
		<td>execute_report</td>
		<td align="left">
			<i>parameters</i> JSON<br />
		</td>
		<td align="left">
		</td>
	</tr>

	
</table>



<h2>User related functions</h2>

<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td id="sql-grape.user_save">grape.user_save</td>
		<td align="left">
			JSON containing: <br />
			<i>user_id INTEGER</i> <br />
			<i>username TEXT</i><br />
			<i>password TEXT</i><br />
			<i>email TEXT</i><br />
			<i>fullnames TEXT</i><br />
			<i>active BOOLEAN optional</i><br />
			<i>role_names TEXT[]</i><br />
			<i>employee_guid</i> GUID<br />
		</td>
		<td align="left">
			Save a user field, or create a new user. <b>API call: <i>POST /grape/user/save</i></b>
		</td>
	</tr>

	<tr>
		<td>grape.username</td>
		<td align="left">
			<i>user_id</i> INTEGER<br />
		</td>
		<td align="left">
			Returns the username for a user ID, or NULL if it does not exist.
		</td>
	</tr>

	<tr>
		<td>grape.user_id_from_name</td>
		<td align="left">
			<i>username</i> TEXT<br />
		</td>
		<td align="left">
			Returns the user ID for a username, or NULL if it does not exist.
		</td>
	</tr>

	<tr>
		<td>grape.user_id_from_fullnames</td>
		<td align="left">
			<i>fullnames</i> TEXT<br />
		</td>
		<td align="left">
			Returns the user ID for a user found by fullnames, or NULL if it does not exist.
		</td>
	</tr>

	<tr>
		<td>grape.username_from_fullnames</td>
		<td align="left">
			<i>fullnames</i> TEXT<br />
		</td>
		<td align="left">
			Returns the username for a user found by fullnames, or NULL if it does not exist.
		</td>
	</tr>

	<tr>
		<td>grape.hash_user_password</td>
		<td align="left">
			<i>user_id</i> INTEGER<br />
		</td>
		<td align="left">
			Hashes a password for user and updates the user table afterwards.
			<ul>
				<li>If the hash length is the same as the password length and the password starts with a '$' sign, it is assumed that the password is already hashed and the update is ignored (return -1)</li>
				<li>If grape.setting  passwords_hashed isn't true, nothing is done (return -2)</li>
				<li>On success 0 is returned</li>
			</ul>
		</td>
	</tr>

	<tr>
		<td>grape.hash_user_password</td>
		<td align="left">
			<i>username</i> TEXT<br />
		</td>
		<td align="left">
			Overload for <i>grape.hash_user_password (user_id INTEGER)</i>
		</td>
	</tr>
</table>

<h2>Session related functions</h2>

<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>grape.current_user_roles</td>
		<td align="left">
		</td>
		<td align="left">
			Returns a list of all roles the current user belongs to.
		</td>
	</tr>

	<tr>
		<td>grape.current_user_id</td>
		<td align="left">
		</td>
		<td align="left">
			Returns the integer value of the current session's "grape.user_id" setting. This is typically set with grape before any API call is called
		</td>
	</tr>

	<tr>
		<td>grape.check_session_access</td>
		<td align="left">
			<i>session_id</i> TEXT - Session ID to check for<br />
			<i>check_path</i> TEXT - Access path to check<br />
			<i>check_method</i> TEXT - HTTP method to check (GET/POST)<br />
		</td>
		<td align="left">
			This function performs access control on an API call (based on the path and session ID). It is automatically called by the express
			app before any API call is performed:
			<ol>
				<li>Check that the path has access control on it. If it cannot be found, the grape setting default_access_allowed is checked, and if
					true, access will be granted. If not, it will be denied and code 9 will be returned</li>
			<li>
			If the path has a role 'guest' granted access to it, everyone will be allowed (even if the session is invalid)
			</li>
			<li>
			If the session is invalid, access will be denied and code 1 returned
			</li>
			<li>
			If the path has a role 'all', only, and all, valid sessions will be granted access
			</li>
			<li>
			If the user has access granted to the access path's role, access is granted
			</li>
			<li>
			If all the above fails, access is denied with code 2
			</li>
		</ol>
		</td>
	</tr>

	<tr>
		<td>grape.session_insert</td>
		<td align="left">
			<i></i> <br />
		</td>
		<td align="left">
			
		</td>
	</tr>

	<tr>
		<td>grape.logout</td>
		<td align="left">
			<i>JSON</i> JSON containing session_id<br />
		</td>
		<td align="left">
			
			<b>API call <i>/grape/logout</i></b>
		</td>
	</tr>

	<tr>
		<td>grape.session_ping</td>
		<td align="left">
			<i>JSON</i> JSON containing session_id<br />
		</td>
		<td align="left">
			Checks validity of a session and returns a JSON object containing the session's username, user_id, fullnames, email, GUID and user_roles. <b>API Call <i>/grape/session_ping</i></b>
		</td>
	</tr>
	<tr>
		<td>grape.session_insert</td>
		<td align="left">
			<i>username</i> TEXT<br />
			<i>password</i> TEXT<br />
		</td>
		<td align="left">
			This function inserts a new session for a valid username and password provided.
			<b>API call <i>/grape/logout</i></b>
		</td>
	</tr>
	<tr>
		<td>grape.</td>
		<td align="left">
			<i></i> <br />
		</td>
		<td align="left">
			
		</td>
	</tr>

	<tr>
		<td>grape.</td>
		<td align="left">
			<i></i> <br />
		</td>
		<td align="left">
			
		</td>
	</tr>


</table>



<h2>Other utility functions</h2>
<table style="compact">
	<thead><th width="20%">Name</th><th width="20%">Parameters</th><th width="60%">Description</th></thead>
	<tr>
		<td>month_diff</td>
		<td align="left"><i>_d1</i> DATE<br /><i>_d2</i> DATE</td>
		<td align="left">Returns an integer containing the number of months between the two dates provided. If the first parameter is after the second (higher date), the return value will be negative.</td>
	</tr>
	<tr>
		<td>set_value</td>
		<td align="left"><i>_name</i> TEXT<br /><i>_value</i> TEXT</td>
		<td align="left">Sets the value (insert if new, replace if exist) in the key-value pair table <tname>grape.setting</tname> returning _value.</td>
	</tr>
	<tr>
		<td>get_value</td>
		<td align="left"><i>_name</i> TEXT<br /><i>_default_value</i> TEXT</td>
		<td align="left">Gets the value for setting <i>_name</i>, and if not found it will return <i>_default_value</i>. Defined in <fname>setting.sql</fname></td>
	</tr>
	<tr>
		<td>generate_uuid</td>
		<td align="left"></td>
		<td align="left">Generates a unique UUID (for example b1086d35-e973-4356-3adc-2eeb6f4963e2). Defined in <fname>uuid.sql</fname></td>
	</tr>
	<tr>
		<td>array_lowercase</td>
		<td align="left">TEXT[]</td>
		<td align="left"></td>
	</tr>
	<tr>
		<td>clean_telephone_number</td>
		<td align="left"><i>_tel</i> TEXT<br /></td>
		<td align="left"></td>
	</tr>
	<tr>
		<td>random_string</td>
		<td align="left"><i>length</i> INTEGER<br /></td>
		<td align="left">Generates a random string of <i>length</i> length. Defined in <fname>random_string.sql</fname></td>
	</tr>

	<!--
	<tr>
		<td>array_lowercase</td>
		<td align="left"><i></i> <br /></td>
		<td align="left">Defined in <fname></fname></td>
	</tr>
	-->


</table>

</ps_doc>

