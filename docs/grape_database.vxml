<?xml version="1.0"?>
<ps_doc title="Grape Database">
<h1 id="grape_database">Database</h1>
Grape interacts heavily with a database. Users, sessions and other data is stored in the database. Functions are defined here, and most business logic happen in the database.

The following subdirectories can be found in a project's <fname>db/</fname> directory.
	<ul>
		<li><i>schema/</i> - The database schema file (<b>.dbm file</b> - created in <link id="install-pgmodeler">pgModeler</link>, and exported DDL to SQL files</li>
		<li><i>function/</i> - Directories and files containing database functions</li>
		<li><i>process/</i> - Files containing database functions related to <link id="platsoft-background-worker">background processes</link></li>
		<li><i>data/</i> - Files containing initial data for the system</li>
		<li><i>deployments/</i> - Containing subdirectories for specific deployments. See the section Deployments for more information regarding this</li>
	</ul>


<h2>Defining the database structure</h2>

<h3>Database model</h3>
pgModeler is a database modelling tool specifically designed for PostgreSQL. The model are saved in a DBM (*.dbm) file, and exported to a *.sql file. Usually, both <i>.dbm</i> files and the corresponding <i>.sql</i> files are added to the repositories. The sql files are always generated by pgModeler and should never be edited manually.
The DBM file is saved in <fname>db/schema/<red>PROJECTNAME</red>.dbm</fname>. From within pgModeler, the SQL should be exported to a file <fname>db/schema/<red>PROJECTNAME</red>.sql</fname>. When the database is created, this file will be loaded.

<h3>Database functions</h3>
Database functions (like API call handlers or business logic) usually resides in <fname>db/function/</fname>. Files should be properly named, and functions grouped together in files, in a way that is understandable to someone who is not familiar with the code. Files should be all lower-case, and words split by underscore.

<h3>Initial data</h3>
<red>TODO</red>
The data/ directory.

<h3>Naming conventions</h3>
<ul>
	<li>Keep table names lowercase, with words separated by underscore</li>
	<li>If a relation (table) has an id/unique column (which should be the case in most tables), add '_id' to the table name. For example, table policy has an ID column called <i>policy_id</i>. Note that there are security risks involved in using an auto-incrementing column where the value of such column are exposed to clients, or untrusted personel.</li>
	<li>Use a 'v_' prefix for views, for example <i>v_policy</i></li>
	<li>Use a 'mv_' prefix for materialized views, for example <i>mv_policy_address</i></li>
	<li>Use a '_idx' suffix for indexes, for example <i>policy_id_idx</i></li>
	<li>Use a '_fk' suffix for foreign key constraints, with an abbreviation of the tablename as prefix, for example <i>po_policy_id_fk</i></li>
</ul>
<h3>Pitfalls to avoid</h3>
<ul>
	<li>Avoid multi-column indexes (and primary keys) unless it is really suitable for the situation</li>
	<li>Avoid too many indexes on a table</li>
</ul>

<h2>Schemas</h2>
By default, grape applications will use the following schemas:
<ul>
	<li>public</li>
	<li>grape</li>
	<li>proc</li>
</ul>

<h2>Creating the database</h2>
grape-tools contains a script called <i>setup_database</i> to create a database from a typical setup described above. If grape-tools is installed using <icode>npm -g grape-tools</icode>, setup_database will be available in the environment.
<code>
  Usage: setup_database [options] [config_file] | [directory directory directory ...]

  Options:

    -h, --help                     output usage information
    -r, --recreate                 Drop and recreate database (a connection will be opened using the environment variables PG_SUPERUSER, PG_SUPERUSERDB and PG_SUPERUSERPASSWORD)
    -d, --dburi [dburi]            DB connection string (postgresql://user:password@host/dbname)
    -s, --superdburi [superdburi]  Super user DB connection string (if not specified, environment variables will be used)
</code>

If a config.js file is provided to setup_database, SQL files will be loaded in the following order: 
<ol>
	<li>Grape database files are loaded from <i>node_modules/ps-grape/db</i></li>
	<li>Each entry in the <link id="conf-db_definition">db_definition</link> config option are traversed, and subdirectories named 'schema', 'function', 'view' and 'data' (in that order) are recursively read for SQL files. The 'data' directory is ignored when <i>--recreate</i> is not used</li>
	<li>Each entry in the <link id="conf-sql_dirs">sql_dirs</link> config option are traversed recursively, and SQL files loaded</li>
</ol>

<p>
If the <i>-r, --recreate</i> option is specified, a "CREATE DATABASE" statement will be executed in a seperate connection before the other files are loaded.
</p>

<h3>File order</h3>
setup_database loads SQL files alphabetically. Sometimes it might be necessary to explicitely change this load order. This can be done by adding a <i>-- Require: </i> pre-processing instruction in the SQL file. The file that is Require'd, will be loaded before the file containing the instruction. For example, having the following in an SQL file called file.sql, will force the loading of other_file.sql before file.sql:
<code>-- Require: other_file.sql</code>

</ps_doc>
