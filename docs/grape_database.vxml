<?xml version="1.0"?>
<ps_doc title="Grape Database">
<h1 id="grape_database">Database</h1>
Grape interacts heavily with a database. Users, sessions and other data is stored in the database. Functions are defined here, and most business logic happen in the database.

The following subdirectories can be found in a project's <fname>db/</fname> directory.
	<ul>
		<li><i>schema/</i> - The database schema file (<b>.dbm file</b> - created in <link id="install-pgmodeler">pgModeler</link>, and exported DDL to SQL files).</li>
		<li><i>function/</i> - Directories and files containing database functions.</li>
		<li><i>process/</i> - Files containing database functions related to <link id="platsoft-background-worker">background processes</link>.</li>
		<li><i>data/</i> - Files containing initial data for the system.</li>
		<li><i>deployments/</i> - Containing subdirectories for specific deployments. See the section Deployments for more information regarding this.</li>
	</ul>


<h2>Defining the database structure</h2>

<h3>Database model</h3>
<p>
pgModeler is a database modelling tool specifically designed for PostgreSQL. The model are saved in a DBM (*.dbm) file, and exported to a *.sql file. Usually, both <i>.dbm</i> files and the corresponding <i>.sql</i> files are added to the repositories. The sql files are always generated by pgModeler and should never be edited manually.
The DBM file is saved in <fname>db/schema/<red>PROJECTNAME</red>.dbm</fname>. From within pgModeler, the SQL should be exported to a file <fname>db/schema/<red>PROJECTNAME</red>.sql</fname>. When the database is created, this file will be loaded.
</p>

<h3>Database functions</h3>
Database functions (like API call handlers or business logic) usually resides in <fname>db/function/</fname>. Files should be properly named, and functions grouped together in files, in a way that is understandable to someone who is not familiar with the code. File names should be all lowercase, and words split by a underscore. For example, <i>file_name.sql</i>.

<h3>Initial data</h3>
Initial data for the system usually resides in <fname>db/data/</fname>. These sql functions includes data such as user/access roles, settings and whitelist tables specific to the system. 

<h3>Indexes</h3>
<p>
<note>Remember that primary key columns automatically have indexes assigned to them.</note>
Always make indexes on the following columns:
<ul>
	<li>Any column that is referenced by a foreign key.</li>
	<li>Any column that references a foreign key.</li>
	<li>Any column that is used often (in the WHERE clause of queries).</li>
</ul>
</p>

<h3>Naming conventions</h3>
<ul>
	<li>Keep table names lowercase, with words separated by a underscore. For example, <i>table_name</i>.</li>
	<li>If a relation (table) has an id/unique column (which should be the case in most tables), add '_id' to the table name. For example, table policy has an ID column called <i>policy_id</i>. <note>There are security risks involved in using an auto-incrementing column where the value of such a column is exposed to clients, or untrusted personnel.</note></li>
	<li>Use a 'v_' prefix for views. For example, <i>v_policy</i></li>
	<li>Use a 'mv_' prefix for materialized views. For example, <i>mv_policy_address</i></li>
	<li>Use a '_idx' suffix for indexes. For example, <i>policy_id_idx</i></li>
	<li>Use a '_fk' suffix for foreign key constraints, with an abbreviation of the tablename as prefix. For example, <i>po_policy_id_fk</i></li>
</ul>
<h3>Pitfalls to avoid</h3>
<ul>
	<li>Avoid multi-column indexes (and primary keys) unless it is really suitable for the situation.</li>
	<li>Avoid too many indexes on a table.</li>
</ul>

<h3>Schemas</h3>
By default, grape applications will use the following schemas:
<ul>
	<li>public</li>
	<li>grape</li>
	<li>proc</li>
</ul>

<h2>Using NOTIFY/LISTEN</h2>
<p>
	Grape includes a utility function, <i>new_notify_handler(<b>channel_name</b>, <b>callback</b>)</i>, which will keep track of callbacks for database <u>NOTIFY</u> events. This should be used in a custom background worker.
	<note color="orange">When multiple instances of workers have registered a LISTENer, all of them will be invoked when a NOTIFY is called. Only add notification listeners in worker processes, not API call handlers</note>
</p>

<include href="../grape-db-setup/grape-db-setup.vxml" parse="vxml" level="1" />


</ps_doc>
