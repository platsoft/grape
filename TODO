
Worker Mgmt:
	- Change to IPC Connectivity between workers, instead of using the FIFO [WIP - Hans]
	- Add ability to specify PID file path in config [E]
	- Better/easier comms between worker processes (and perhaps remotes?)

DB Management:
	- Check DB connection before spawning workers
	- Patch tables
	- Run a grape app without a database

Authentication:
	- Make roles be able to belong to roles
	- SAML Integration
	- HTTP DIGEST authentication
	- Check permissions in javascript (keep a synced permissions list from DB to check against) notifications are done here
	- Static data loader keeping cache of users and sessions

Security:
	- Implement pre-flight requests properly, use it with all calls
	- Implement HTTP Strict Transport Security (https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet)
	- Limit HTTP Authorization to certain users only (new role basic_auth) [E]

API calls:
	- Register all API calls in DB table
	- Create API calls for stuff that is not JS files or DB functions (like PHP or python) (Implemented API calls in PHP/Python )
	- Expose API calls in SOAP 

Settings management:
	- Make settings a tree
	- New role 'sysadmin' used for configuration of system settings
	- Store all settings in DB
	- Add setting access roles
	- Add setting categories
	- Make available in node upon startup
	- Consolidate DB settings and Config file settings
	- Validation settings
	- Create a function to import/export settings from JSON

Emails:
	- Split email worker into its own grape module
	- Add support to Email attachments
	- Email queuer

Logger:
	- Log username in logfiles
	- API logger (partitioned tables monthly? or write session logs to a file)
		- settings: logging.log_api_calls_to_db

Functionality to be split out into different modules:
	- Emails
	- PDF Generator

- Theme manager
- Create an authentication provider
- API call to get table information (part of table_operations.sql)
- Socket.IO integration
- Enterprise mobility management (EMM)
- Cache the resolving of public resources
- Make the resolving of resources modular (API calls and public dirs)
- Make /download_public_js_files call only get files for the users role


Modules to write:
- Shopping cart module
- WebDAV
	- Document store to Integrate with WebDAV
- SSDP module (Broadcast/discover other grape services (using SSDP))


Done:
- create API calls from JSON schema
- send email via API call
- pdf generator: pass xsl parameters to the pdfgenerator
- accept HTTP authentication instead of X-SessionID (look at Authorization header)
- Loading roles from schema
- System/Frontend integrator - HTTP server that relays api calls to connected systems. HTTP requests (API calls and HTML downloads etc) can be rewritten on the fly. /cabsav/...
- compiled javascript needs to be cached
- Send system notifications through HTTP headers
- Send SMSes
- Two-factor authentication
- Define all API calls in JSON schema - call JS file from it

